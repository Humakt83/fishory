{"version":3,"sources":["FishViewer.js","App.js","serviceWorker.js","apollo.js","index.js"],"names":["GET_FISHES","gql","_templateObject","SEARCH_FISH","_templateObject2","FishViewer","_ref","search","minimumTankSize","queryToUse","trim","length","react_default","a","createElement","react_apollo_esm","query","variables","name","_ref2","loading","error","data","concat","fishes","searchFish","Table","filter","fish","minimum_aquarium_size","map","key","id","size","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","changeSearch","bind","assertThisInitialized","changeMinimumTankSize","event","setState","target","value","Container","fluid","Input","type","onChange","Component","Boolean","window","location","hostname","match","apollo","ApolloClient","uri","ReactDOM","render","client","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2pBAKO,IAAMA,EAAaC,IAAHC,KAWVC,EAAcF,IAAHG,KAWTC,EAAA,SAAAC,GAA+B,IAA7BC,EAA6BD,EAA7BC,OAAQC,EAAqBF,EAArBE,gBACjBC,EAAaF,GAAUA,EAAOG,OAAOC,OAAS,EAAIR,EAAcH,EACtE,OAAQY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOP,EAAYQ,UAAW,CAACC,KAAMX,IACjD,SAAAY,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,GAAIF,EAAS,OAAO,KACpB,GAAIC,EAAO,iBAAAE,OAAkBF,GAC7B,IAAMG,EAASF,EAAKG,YAAcH,EAAKE,QAAU,GACjD,OACEZ,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,iCAGJF,EAAAC,EAAAC,cAAA,aACGU,EACEG,OAAO,SAAAC,GAAI,OAAKpB,GAAmBA,GAAmBoB,EAAKC,wBAC3DC,IAAI,SAAAF,GAAI,OACThB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKH,EAAKI,IACZpB,EAAAC,EAAAC,cAAA,UAAKc,EAAKV,MACVN,EAAAC,EAAAC,cAAA,UAAKc,EAAKK,MACVrB,EAAAC,EAAAC,cAAA,UAAKc,EAAKC,+BCVXK,cAlCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACpC,OAAQ,GAAIC,gBAAiB,GAC3C4B,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,sBAAwBX,EAAKW,sBAAsBF,KAA3BR,OAAAS,EAAA,EAAAT,CAAAD,IAJZA,4EAONY,GACXT,KAAKU,SAAS,CAAC1C,OAAQyC,EAAME,OAAOC,sDAGhBH,GACpBT,KAAKU,SAAS,CAACzC,gBAAiBwC,EAAME,OAAOC,yCAI7C,OACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAWC,OAAK,GACdzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,KAAK,OACLJ,MAAOZ,KAAKI,MAAMpC,OAClBiD,SAAUjB,KAAKK,eACjBhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,KAAK,SACLJ,MAAOZ,KAAKI,MAAMnC,gBAClBgD,SAAUjB,KAAKQ,wBACjBnC,EAAAC,EAAAC,cAACT,EAAD,CACEE,OAAQgC,KAAKI,MAAMpC,OACnBC,gBAAiB+B,KAAKI,MAAMnC,0BA7BpBiD,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DChBSC,EAAA,UAAIC,GAAa,CAC9BC,IAAK,kCCKPC,IAASC,OACPvD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBqD,OAAQA,GACtBxD,EAAAC,EAAAC,cAACuD,EAAD,OAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7566511.chunk.js","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Table } from 'reactstrap';\n\nexport const GET_FISHES = gql`\n  query {\n    fishes {\n      id\n      name\n      size\n      minimum_aquarium_size\n    }\n  }\n`;\n\nexport const SEARCH_FISH = gql`\n  query SearchFish($name: String) {\n    searchFish(name: $name) {\n      id\n      name\n      size\n      minimum_aquarium_size\n    }\n  }\n`;\n\nexport default ({search, minimumTankSize}) => {\n  const queryToUse = search && search.trim().length > 2 ? SEARCH_FISH : GET_FISHES;\n  return (<Query query={queryToUse} variables={{name: search}}>\n    {({ loading, error, data }) => {\n      if (loading) return null;\n      if (error) return `Error!: ${error}`;\n      const fishes = data.searchFish || data.fishes ||Â [];\n      return (\n        <Table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Size</th>\n              <th>Minimum Tank Size</th>\n            </tr>\n          </thead>\n          <tbody>\n            {fishes\n              .filter(fish => !minimumTankSize || minimumTankSize <= fish.minimum_aquarium_size)\n              .map(fish => (\n              <tr key={fish.id}>\n                <td>{fish.name}</td>\n                <td>{fish.size}</td>\n                <td>{fish.minimum_aquarium_size}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n    )}}\n    </Query>)\n};","import React, { Component } from 'react';\nimport { Input, Container } from 'reactstrap';\n\nimport FishViewer from './FishViewer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {search: '', minimumTankSize: 0};\n    this.changeSearch = this.changeSearch.bind(this);\n    this.changeMinimumTankSize = this.changeMinimumTankSize.bind(this);\n  }\n\n  changeSearch(event) {\n    this.setState({search: event.target.value});\n  }\n\n  changeMinimumTankSize(event) {\n    this.setState({minimumTankSize: event.target.value});\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Input\n          type=\"text\"\n          value={this.state.search}\n          onChange={this.changeSearch} />\n        <Input\n          type=\"number\"\n          value={this.state.minimumTankSize}\n          onChange={this.changeMinimumTankSize} />\n        <FishViewer \n          search={this.state.search}\n          minimumTankSize={this.state.minimumTankSize}/>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport default new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apollo';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) module.hot.accept();\n\n"],"sourceRoot":""}